<?php

namespace Esolving\Eschool\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * TypeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TypeRepository extends EntityRepository {

    public function findAllRolesByLanguageNoDuplicated($xlanguage, $currentRoleId = null) {
//        $settings = $this->getEntityManager()->getRepository('EsolvingEschoolCoreBundle:Setting')->findAllExcept($currentSettingId);
//        foreach ($settings as $settingV) {
//            $settingsTypeArray[] = $settingV->getSettingType()->getId();
//        }
        $qb = $this->createQueryBuilder('type');
        $qb->addSelect('languages')
                ->join("type.languages", "languages")
                ->where($qb->expr()->eq("type.category", ":category"))
                ->andWhere($qb->expr()->neq("type.name", ':name'))
                ->andWhere($qb->expr()->eq("languages.language", ":language"))
                ->andWhere($qb->expr()->eq("type.status", ":status"))
//                ->andWhere($qb->expr()->notIn('type.id', $settingsTypeArray))
                ->setParameter('category', 'role')
                ->setParameter('name', 'role')
                ->setParameter('language', $xlanguage)
                ->setParameter('status', '1');

        if ($currentRoleId) {
            $qb->andWhere('type.id NOT IN ( select role_roleType.id from EsolvingEschoolUserBundle:Role role join role.roleType role_roleType where role.id != :currentRoleId )')
                    ->setParameter('currentRoleId', $currentRoleId);
        } else {
            $qb->andWhere('type.id NOT IN ( select role_roleType.id from EsolvingEschoolUserBundle:Role role join role.roleType role_roleType )');
        }
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function findAllSettingsByLanguageNoDuplicated($xlanguage, $xcurrent_setting_id) {
        $settings = $this->getEntityManager()->getRepository('EsolvingEschoolCoreBundle:Setting')->findAllExcept($xcurrent_setting_id);
        foreach ($settings as $settingV) {
            $settingsTypeArray[] = $settingV->getSettingType()->getId();
        }
        $qb = $this->createQueryBuilder('type');
        $q = $qb->addSelect('languages')
                ->join("type.languages", "languages")
                ->where($qb->expr()->eq("type.category", ":category"))
                ->andWhere($qb->expr()->neq("type.name", ':name'))
                ->andWhere($qb->expr()->eq("languages.language", ":language"))
                ->andWhere($qb->expr()->eq("type.status", ":status"))
                ->andWhere($qb->expr()->notIn('type.id', $settingsTypeArray))
                ->setParameter('category', 'setting')
                ->setParameter('name', 'setting')
                ->setParameter('language', $xlanguage)
                ->setParameter('status', '1')
                ->getQuery();
        return $q->getResult();
    }

    public function findAllByLanguageToSonataAdmin($xlanguage, $query) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $query->addSelect('type_languages')
                ->join('o.languages', 'type_languages')
                ->where($qb->expr()->eq('type_languages.language', $qb->expr()->literal($xlanguage)))
        ;
        return $query;
    }

    public function findByCategoryByLanguage($xcategory, $xlanguage) {
        $qb = $this->createQueryBuilder('type');
        $q = $qb->addSelect('languages')
                ->join("type.languages", "languages")
                ->where($qb->expr()->eq("type.category", ":category"))
                ->andWhere($qb->expr()->neq("type.name", ':name'))
                ->andWhere($qb->expr()->eq("languages.language", ":language"))
                ->andWhere($qb->expr()->eq("type.status", "1"))
                ->setParameter('category', $xcategory)
                ->setParameter('name', $xcategory)
                ->setParameter('language', $xlanguage)
                ->getQuery();
        return $q->getResult();
    }

    public function findOneByTypeIdByLanguage($typeId, $language) {
        $qb = $this->createQueryBuilder('type');
        $qb->addSelect('languages')
                ->join("type.languages", "languages")
                ->andWhere($qb->expr()->eq("languages.language", ":language"))
                ->andWhere($qb->expr()->eq("type.status", "1"))
                ->andWhere('type.id = :typeId')
                ->setParameter('language', $language)
                ->setParameter('typeId', $typeId);
        $query = $qb->getQuery();
        return $query->getOneOrNullResult();
    }

    public function findAllCustomObject($xlanguage = 'es') {
        $qb = $this->createQueryBuilder('type');
        $q = $qb->addSelect('languages')
                ->join("type.languages", "languages")
                ->where($qb->expr()->eq("languages.language", ":language"))
                ->andWhere($qb->expr()->eq("type.status", "1"))
                ->setParameter("language", $xlanguage)
//                ->setFirstResult('0')
//                ->setMaxResults('1000')
                ->getQuery();
        return $q->getResult();
    }

}